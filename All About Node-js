--> NODE JS : 
      
       . It is the Javascript runtime with v8 engine so that javascript can be executed outside the browser.
       . By using NODE JS we can use JS at the backend.
       
       
--> Module 1 ( Reading and writing in the file ) : 

 const fs = require("fs");

const txtIn = fs.readFileSync("input.txt", "utf-8");
console.log(txtIn);

const txtOut = `This is what we know about avacado : ${txtIn}`;
fs.writeFileSync("output.txt", txtOut);


--> Blocking and non-Blocking : Asynchronous behaviour of node-js : 
  
       Since Js uses single thread then synchronous ways is executing the code line by line and one line is executed then only the next line will
       be executed. So this may lead to lag. This problem can be resolved by using asynchronous way in this we have a callback function and the code
       will be executed in the backround.
       
const fs = require("fs");

fs.readFile("input.txt", "utf-8", (err, data) => {
  if (err) return console.log("ERROR!...");
  console.log(data);
  fs.writeFile("output2.txt", `The new File : ${data}`, "utf-8", (err) => {
    console.log("File writen successfully...");
  });
});
console.log("Reading file....");


---------------------------------------------------------------------------------------------------------------------------------------------------


--> Creating a simple web server :   
 
const http = require("http");

const server = http.createServer((req, res) => {
  res.end("Hello from the server....");
});

server.listen(8000, "127.0.0.1", () => {
  console.log("Listening to the request on port number 8000");
});


---------------------------------------------------------------------------------------------------------------------------------------------------

--> Routing : 
      
       . Routing basically means implementing different actions for different url's


      #NOTE : An http header is a piece of information about the response that we are sending back.
      
      
const http = require("http");
const url = require("url");

const server = http.createServer((req, res) => {
  const pathName = req.url;

  if (pathName === "/" || pathName === "/overview") {
    res.end("This is a overview...");
  } else if (pathName === "/product") {
    res.end("This is a product....");
  } else {
    res.writeHead(404, {
      "Content-type": "text/html",
      "my-own-header": "hello world",
    });
    res.end("<h1> page not found... </h1>");
  }
});

server.listen(8000, "127.0.0.1", () => {
  console.log("Listening to the server...");
});


---------------------------------------------------------------------------------------------------------------------------------------------------



--> Building a very simple web Api : 

const fs = require('fs');
const http = require('http');
const url = require('url');

const data = fs.readFileSync('./data.json', 'utf-8');
const dataObject = JSON.parse(data);

const server = http.createServer((req, res) => {
  const pathName = req.url;

  if (pathName === '/' || pathName === '/overview') {
    res.end('This is a overview...');
  } else if (pathName === '/product') {
    res.end('This is a product....');
  } else if (pathName === '/api') {
    res.writeHead(200, {
      'Content-type': 'application/json',
    });
    res.end(data);
  } else {
    res.writeHead(404, {
      'Content-type': 'text/html',
      'my-own-header': 'hello world',
    });
    res.end('<h1> page not found... </h1>');
  }
});

server.listen(8000, '127.0.0.1', () => {
  console.log('Listening to the server...');
});


---------------------------------------------------------------------------------------------------------------------------------------------------
      


--> NPM ( Node Package Manager ) :  It is a command line interface app that automatically comes with NodesJS and which we use to install and manage 
                                    open source pacakages.
                                    
                                    command -- npm init It will initialize npm package which contains data about the project and the packages installed.
                                    
                    There are two types of packages that we can install - simple dependencies and development dependencies.
                    And alse there are two types of installs locally and globally. unlike local global installs are avaiable not only in project folder
                    but anywhere in the entire machine.
                    
                    
            --> Verions of the dependecies : Most of the dependencies uses semantic notations eg: ^1.18.11 - 1 is the major version , 18 is the minor version
                                             and 11 is the patch version.
                                             
                                             ^ = for patch verions 
                                             ~ = for minor and patch versions 
                                             * = for all verions
                                             
                      --. Delete packages : We can also delete packages 
                                  npm install express
                                  npm uninstall express
                                  
                                  
                                  
               #Note : We do not have to share the node-module folder on the github or to other computer as it contains tons of file and each file may contains
                       tons of code so you just need to share your project without node folder and then when you intsall your project again in your computer
                       just run the command "npm install ". It will automatically includes all the node modules automatically.
                       
                       
                       
                       
---------------------------------------------------------------------------------------------------------------------------------------------------                    
    
    
    --> Thread and thread pool :   If you run a node application it just run in a single thread.
    
                                   . In single thread there are various steps -
                                      . Initialize program
                                      . Execute 'top-level' code.
                                      . Require Modules
                                      . Register events callbacks
                                      . Start event loop
                                      
                   #Note : The thread pool give us four additional thread that are completely seprated from the main single thread and the event
                           loop offload heavy tasks to the event loop. and it is done automatically behind the scenes
                    
                    
---------------------------------------------------------------------------------------------------------------------------------------------------

--> Event Loop : All the code that is not in the top level and is inside callback function runs in the event loop.


---------------------------------------------------------------------------------------------------------------------------------------------------

--> Let's start building the natours API :


             What is express and why should we use it ?
              
             . Express is minimal Node.js framework, a higher level of abstraction.
             . It contains a robust sets of features: complex routing, easier handling of request and responses, middleware , server-side rendering
               etc.
             . make it easy to organize our appplication in MVC archietecture.


const express = require('express');
const app = express();

app.get('/', (req, res) => {
  res
    .status(200)
    .json({ message: 'Hello from the server side...', app: 'nators' });
});

app.post('/', (req, res) => {
  res.send('You can post');
});

const port = 3000;
app.listen(port, () => {
  console.log(`App running on port ${port}`);
});


--> APPLICATION PROGRAMMING INTERFACE ( API ) : It is a piece of software that is used by another peiece of software, in order to allow applications
                                                to talk to each other.
                                                
                                                
      REST Archietecture : ( Representaional State Transfer ) 
      
      There are 5 principles : 
        1. Seprate API into logical resources
        2. Explore- Structured-based URL's
        3. Use HTTP methods
        4. Send data as JSON
        5. Be Stateless
        
        
        1. Seprate API into logical resources : Object or representaion of something, which has data associated to it, Anything that can be named 
                                                can be termed as resource.
        2. Explore- Structured-based URL's  : 
